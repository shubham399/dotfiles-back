;alias vim="nvim"
# Only in linux
#alias pbcopy='xclip -selection clipboard'
#alias pbpaste='xclip -selection clipboard -o'
alias jj="pbpaste | jsonpp | pbcopy"
alias c=clear
alias s="source ~/.zshrc"
alias uuid=' tr -dc A-Za-z0-9 </dev/urandom | head -c 2000| md5sum | cut -c1-30'
# general
alias ls=exa
alias sl=exa
alias d='dirs -v | head -10'
alias g=git
alias glad='git log --all --decorate --oneline --graph'
alias glgga="git log --graph --pretty=oneline --abbrev-commit --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' "
alias ga='git add'
alias gaa='git add --all'
alias gap='git apply'
alias gapa='git add --patch'
alias gau='git add --update'
alias gav='git add --verbose'
alias gb='git branch'
alias gbD='git branch -D'
alias gba='git branch -a'
alias gbd='git branch -d'
alias gbda='git branch --no-color --merged | command grep -vE "^(\*|\s*(master|develop|dev)\s*$)" | command xargs -n 1 git branch -d'
alias gbl='git blame -b -w'
alias gbnm='git branch --no-merged'
alias gbr='git branch --remote'
alias gbs='git bisect'
alias gbsb='git bisect bad'
alias gbsg='git bisect good'
alias gbsr='git bisect reset'
alias gbss='git bisect start'
alias gc='git commit -v'
alias gpull='git fetch && git pull'
alias gitdelete='git fetch --all -p; git branch -vv | grep ": gone]" | awk '\''{ print $1 }'\'' | xargs -n 1 git branch -D'
alias l='ls --color=auto'
alias la='ls -a'
alias ll='ls -lah'
#alias ls='l -G'
alias md='mkdir -p'
alias pc=pbcopy
alias pp=pbpaste
alias gpd="gpull && gitdelete"
alias gls="git log --oneline --graph --decorate"
alias cbh='echo "connect  78:44:05:C9:3B:9F" | bluetoothctl'
alias dbh='echo "disconnect  78:44:05:C9:3B:9F" | bluetoothctl'
## only for debian
alias sysup="sudo apt-get update && sudo apt-get upgrade -y && sudo apt-get dist-upgrade -y && sudo apt-get autoclean -y && sudo apt-get autoremove -y"
alias htw="cd ~/Documents/Personal/shubhkumar.in;rm -Rf node_modules;nvm use;npm i;hexo clean;hexo g;hexo twitter-publish;git add .;git commit -m "Twitter post";git push"
## Get me a new temp working dir
ot(){
	cd $(mktemp -d)
}
## Kubernetes Shell
kshell(){
 kubectl exec -it $1 -- bash
}

isup(){
	curl -s https://isitup.org/$1 | egrep -o '(Yay, .* is up)|(Oh no .* is down!)' | uniq
}



# Git version checking
autoload -Uz is-at-least
git_version="${${(As: :)$(git version 2>/dev/null)}[3]}"

#
# Functions
#

# The name of the current branch
# Back-compatibility wrapper for when this function was defined here in
# the plugin, before being pulled in to core lib/git.zsh as git_current_branch()
# to fix the core -> git plugin dependency.
function current_branch() {
  git_current_branch
}

# Pretty log messages
function _git_log_prettily(){
  if ! [ -z $1 ]; then
    git log --pretty=$1
  fi
}

# Warn if the current branch is a WIP
function work_in_progress() {
  command git -c log.showSignature=false log -n 1 2>/dev/null | grep -q -- "--wip--" && echo "WIP!!"
}

# Check if main exists and use instead of master
function git_main_branch() {
  command git rev-parse --git-dir &>/dev/null || return
  local ref
  for ref in refs/{heads,remotes/{origin,upstream}}/{main,trunk,mainline,default}; do
    if command git show-ref -q --verify $ref; then
      echo ${ref:t}
      return
    fi
  done
  echo master
}

# Check for develop and similarly named branches
function git_develop_branch() {
  command git rev-parse --git-dir &>/dev/null || return
  local branch
  for branch in dev devel development; do
    if command git show-ref -q --verify refs/heads/$branch; then
      echo $branch
      return
    fi
  done
  echo develop
}
